
program main
  
  use omp_lib
  use module1, only: dp, print_matrix_real, trace, dagger, superH, superG,kronecker, expm,&
       & liouvillian,exact_solution, linspace,correlations, integrate, test_integrate,wigner,meshgrid,superM,print_matrix

 
 
  implicit none

  complex(dp), dimension(2,2) :: sigma_z, sigma_plus, sigma_minus, rhozero, H, H_traj
  complex(dp) :: i = complex(0,1),rhovec_zero(4)
 
  real(dp), parameter ::  dt = 1e-3
  real(dp) ::  gamma, Omega, start, finish, t_start = 0, W,tau,time, lim,test,test2
  integer ::  channels,j,m
  integer, parameter :: n=15
  real(dp) :: xvec(n), yvec(n), X(n,n),Y(n,n),wig(n,n)

  sigma_plus = reshape ( (/ 0,0,1,0/),(/2,2/) )
  sigma_minus = reshape ( (/ 0,1,0,0/),(/2,2/) )
  sigma_z = reshape ( (/ 1,0,0,-1/),(/2,2/) )
  rhozero = reshape ( (/1,0,0,0/),(/2,2/) )
  rhovec_zero = (/0,0,0,1/)
  
  
  lim = 3
  call linspace(-lim,lim,n,xvec)
  call linspace(-lim,lim,n,yvec)


  call meshgrid(xvec,yvec,X,Y)
  Y=transpose(Y)
  X=transpose(X)
  
   gamma = 1
   Omega = 0.5

   tau = 1
   time=10


   open(unit=1, file='wigner.dat', action="write")
   
   ! resonant fluorescence
   H =  - i*gamma*matmul(sigma_plus,sigma_minus)/2 -i*sqrt(gamma)*Omega*(sigma_plus-sigma_minus)

  ! H_traj =  w*sigma_z/2 

! H_traj = -i*sqrt(const)*Omega*(sigma_plus-sigma_minus) !Omega*(sigma_plus + sigma_minus)/2
   test=0
   call wigner(gamma, sigma_minus, rhovec_zero, H,tau,time,test,test,W)
   print *, W

call cpu_time(start)
   do j=1,n
     print *, j
     do m=1,n
      !  call wigner(gamma, sigma_minus, rhovec_zero, H,tau,time,xvec(j),yvec(m),W)
     ! write(1,'(E22.7,A1,E22.7,A1,E22.7)') xvec(j), char(9), yvec(m), char(9), W
      call wigner(gamma, sigma_minus, rhovec_zero, H,tau,time,X(j,m),Y(j,m),W)
      wig(j,m) = W         
  end do
end do

 do j=1,size(wig,1)
       write(1,'(20G12.4)') wig(j,:)
    end do

    call cpu_time(finish)
    print '("Time = ",f10.6," seconds for Wigner calculation.")',finish-start
    
   close(1)



   

call cpu_time(start)
!call correlations(nruns,sigma_minus,sigma_plus,dt,'g2.dat',t_start,rhovec_zero, H)
!call exact_solution(nruns,sigma_minus,sigma_plus,dt,'exact.dat',rhovec_zero, H)

call cpu_time(finish)
 print '("Time = ",f6.3," seconds for exact solution.")',finish-start

end program main

