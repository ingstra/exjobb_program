
program main

  use module1, only: dp, print_matrix, trace, dagger, superH, identity_matrix, superG

  implicit none

  complex(dp), dimension(2,2) :: sigma_z, sigma_plus, sigma_minus, tm, rho, H
  complex(dp) :: i = complex(0,1)
  real(dp), allocatable :: store(:)
  real(dp), parameter :: Omega = 1, delta_t = 1e-4
  real(dp) :: random, time
  integer, allocatable :: seed(:)
  integer, parameter :: file_unit = 1
  integer :: values(8), k, j, nruns = 10000

  character(len=15) :: file_name = 'testfil'
  
  allocate(store(nruns))

  sigma_plus = reshape ( (/0,0,1,0/),(/2,2/) )
  sigma_minus = reshape ( (/0,1,0,0/),(/2,2/) )
  sigma_z = reshape ( (/1,0,0,-1/),(/2,2/) )
  rho = reshape ( (/1,0,0,0/),(/2,2/) )

  H = Omega*sigma_z/2
  time = 0

  tm = reshape ( (/1,2,3,4/),(/2,2/) )

  !call print_matrix(superG(sigma_minus,rho))
call date_and_time(VALUES=values)

call random_seed(size=k)
allocate(seed(k))
seed(:) = values
call random_seed(put=seed)

!do j=1,nruns
!   call random_number(random)
!   if (random < dt ) then
      
!end do

open(unit=file_unit, file=file_name, action="write")
write(file_unit,'(E22.15)') store
close(file_unit)


   !  write (*,*) 'Hello, world!'   ! This is an inline comment
end program main

